//Задача 54: Задайте двумерный массив. Напишите программу, которая упорядочит по убыванию элементы каждой строки двумерного массива.
//Например, задан массив:
//1 4 7 2
//5 9 2 3
//8 4 2 4
//В итоге получается вот такой массив:
//7 4 2 1
//9 5 3 2
//8 4 4 2

internal class Program
{
    private static void Main(string[] args)
    {
        try
        {
            Random random = new Random();
            Console.Write("Enter a N lines of the array: ");
            int numberN = int.Parse(Console.ReadLine());
            Console.Write("Enter a M columns of the array: ");
            int numberM = int.Parse(Console.ReadLine());
            int[,] array = new int[numberN, numberM];
            for (int i = 0; i < numberN; i++)
            {
                for (int j = 0; j < numberM; j++)
                {
                    array[i,j] = (random.Next(0, 10));
                    Console.Write($"{array[i,j]} ");
                    
                }
                Console.WriteLine();
            }    
            for (int i = 0; i < numberN; i++)
            {    
                List<int> list1 = new List<int>();
                for (int j = 0; j < numberM; j++)
                {
                    list1.Add(array[i,j]);
                    //array[i,j] = list1[j];
                    //Console.Write($"{array[i,j]} ");
                }  
                list1.Sort();
                list1.Reverse(); 
                //Console.WriteLine();
                for (int j = 0; j < numberM; j++)
                {
                    array[i,j] = list1[j];
                    Console.Write($"{array[i,j]} ");
                }
                Console.WriteLine();
            }
        }

        catch
        { 
            Console.WriteLine("You have entere incorrect data");
        }
    }
}

//Задача 56: Задайте прямоугольный двумерный массив. Напишите программу, которая будет находить строку с наименьшей суммой элементов.
//Например, задан массив:
//1 4 7 2
//5 9 2 3
//8 4 2 4
//5 2 6 7
//Программа считает сумму элементов в каждой строке и выдаёт номер строки с наименьшей суммой элементов: 1 строка

internal class Program
{
    private static void Main(string[] args)
    {
        try
        {
            Random random = new Random();
            int[,] array = new int[5, 5];
            int min = int.MaxValue;
            int minLine = 0;
            for (int i = 0; i < 5; i++)
            {
                int sum = 0;
                for (int j = 0; j < 5; j++)
                {
                    array[i,j] = (random.Next(0, 10));
                    Console.Write($"{array[i,j]} ");
                    sum = sum + array[i, j];
                    
                }
                if (sum < min)
                {
                    min = sum;
                    minLine = i + 1;
                }
                Console.WriteLine();
            }    
            Console.WriteLine($"Stroka {minLine}");
        }

        catch
        { 
            Console.WriteLine("You have entere incorrect data");
        }
    }
}

//Задача 58: Задайте две матрицы. Напишите программу, которая будет находить произведение двух матриц.
//Например, даны 2 матрицы:
//2 4 | 3 4
//3 2 | 3 3
//Результирующая матрица будет:
//18 20
//15 18
using System;

// класс с методами расширения
static class MatrixExt
{
    // метод расширения для получения количества строк матрицы
    public static int RowsCount(this int[,] matrix)
    {
        return matrix.GetUpperBound(0) + 1;
    }

    // метод расширения для получения количества столбцов матрицы
    public static int ColumnsCount(this int[,] matrix)
    {
        return matrix.GetUpperBound(1) + 1;
    }   
}

class Program
{
    // метод для получения матрицы из консоли
    static int[,] GetMatrixFromConsole(string name)
    {
        Console.Write("Number of {0} Matrix rows:    ", name);
        var n = int.Parse(Console.ReadLine());
        Console.Write("Number of {0} Matrix columns: ", name);
        var m = int.Parse(Console.ReadLine());

        var matrix = new int[n, m];
        for (var i = 0; i < n; i++)
        {
            for (var j = 0; j < m; j++)
            {
                Console.Write("{0}[{1},{2}] = ", name, i, j);
                matrix[i, j] = int.Parse(Console.ReadLine());
            }
        }

        return matrix;
    }

    // метод для печати матрицы в консоль
    static void PrintMatrix(int[,] matrix)
    {
        for (var i = 0; i < matrix.RowsCount(); i++)
        {
            for (var j = 0; j < matrix.ColumnsCount(); j++)
            {
                Console.Write(matrix[i, j].ToString().PadLeft(4));
            }

            Console.WriteLine();
        }
    }

    // метод для умножения матриц
    static int[,] MatrixMultiplication(int[,] matrixA, int[,] matrixB)
    {       
        if (matrixA.ColumnsCount() != matrixB.RowsCount())
        {
            throw new Exception("Multiplication not possible! Columns of the first matrix not equal to rows of the second matrix.");
        }

        var matrixC = new int[matrixA.RowsCount(), matrixB.ColumnsCount()];

        for (var i = 0; i < matrixA.RowsCount(); i++)
        {
            for (var j = 0; j < matrixB.ColumnsCount(); j++)
            {
                matrixC[i, j] = 0;

                for (var k = 0; k < matrixA.ColumnsCount(); k++)
                {
                    matrixC[i, j] += matrixA[i, k] * matrixB[k, j];
                }
            }
        }

        return matrixC;
    }

    static void Main(string[] args)
    {
        var a = GetMatrixFromConsole("A");
        var b = GetMatrixFromConsole("B");

        Console.WriteLine("Matrix A:");
        PrintMatrix(a);

        Console.WriteLine("Matrix B:");
        PrintMatrix(b);

        var result = MatrixMultiplication(a, b);
        Console.WriteLine("Matrix multiplication:");
        PrintMatrix(result);

        Console.ReadLine();
    }
}

//Задача 60. Сформируйте трёхмерный массив из неповторяющихся двузначных чисел. Напишите программу, 
//которая будет построчно выводить массив, добавляя индексы каждого элемента.
//Массив размером 2 x 2 x 2
//66(0,0,0) 25(0,1,0)
//34(1,0,0) 41(1,1,0)
//27(0,0,1) 90(0,1,1)
//26(1,0,1) 55(1,1,1)
using System;
    {       
            // создаем список двухзначных уникальных чисел от 10 до 99
            List<int> MyList = new List<int>(); 
            for (int i = 10; i < 100; i++) 
                {
                    MyList.Add(i);
                }
            // перемешиваем числа в списке рандомом    
            Random rand = new Random();
            var shuffled = MyList.OrderBy(_ => rand.Next()).ToList();
            //обрезаем список случайных двухзначных чисел до нужного размера (8)
            //shuffled.RemoveRange(8, shuffled.Count - 8);
            // ^ можно и не обрезать
            
            // создаем трехмерный массив, присваиваем каждому элементу значение из обрезанного списка
            // и выводим на экран в нужном формате
            int[,,] array = new int[2,2,2];
            int ListIndex = 0;
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    for (int k = 0; k < 2; k++)
                    {
                        array[i,j,k] = shuffled[0 + ListIndex];
                        Console.Write($"{array[i,j,k]}({i},{j},{k}) ");
                        ListIndex = ListIndex + 1;
                    }
                Console.WriteLine();       
                }
            }
    }       

//Задача 62. Напишите программу, которая заполнит спирально массив 4 на 4.
//Например, на выходе получается вот такой массив:
//01 02 03 04
//12 13 14 05
//11 16 15 06
//10 09 08 07
using System;
    class Program
{
    struct Direction
    {
        public int i;
        public int j;
    }
 
    static void Main(string[] args)
    {
        int n, m;
 
        Console.Write("Enter n: ");
        while (!Int32.TryParse(Console.ReadLine(), out n))
        {
            Console.Write("The entered value is incorrect. Try again: ");
        }
        Console.Write("Enter m: ");
        while (!Int32.TryParse(Console.ReadLine(), out m))
        {
            Console.Write("The entered value is incorrect. Try again: ");
        }
 
        int[,] array = new int[n, m];
        Direction direct = new Direction() { i = 0, j = 1 };
        int count = 0;
 
        int i = 0, j = 0;
        while (count < n * m)
        {
            while ((i < n) && (i >= 0) && (j < m) && (j >=0))
            {
                if (array[i, j] == 0)
                {
                    count++;
                    array[i, j] = count;
                    i += direct.i;
                    j += direct.j;
                }
                else
                {
                    if (count == m * n) break;
                    i -= direct.i;
                    j -= direct.j;
                    ChangeDirection(ref direct);
                    i += direct.i;
                    j += direct.j;
                }
            }
 
            if (i < 0) i = 0;
            if (i >= n) i = n - 1;
            if (j < 0) j = 0;
            if (j >= m) j = m - 1;
            ChangeDirection(ref direct);
            i += direct.i;
            j += direct.j;
        }
 
        Console.WriteLine("Result:");
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < m; j++)
            {
                Console.Write("{0:00} ",array[i, j]);
            }
            Console.WriteLine();
        }
        Console.ReadLine();
    }
 
    static void ChangeDirection(ref Direction direct)
    {
        switch (direct.i)
        {
            case -1:
                direct.i = 0;
                direct.j = 1;
                break;
            case 1:
                direct.i = 0;
                direct.j = -1;
                break;
            case 0:
                if (direct.j > 0)
                {
                    direct.i = 1;
                    direct.j = 0;
                }
                else
                {
                    direct.i = -1;
                    direct.j = 0;
                }
                break;
        }
    }
}    
